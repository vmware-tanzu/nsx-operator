/* Copyright Â© 2024 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: Apache-2.0 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/nsx-operator/pkg/apis/vpc/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetPortLister helps list SubnetPorts.
// All objects returned here must be treated as read-only.
type SubnetPortLister interface {
	// List lists all SubnetPorts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetPort, err error)
	// SubnetPorts returns an object that can list and get SubnetPorts.
	SubnetPorts(namespace string) SubnetPortNamespaceLister
	SubnetPortListerExpansion
}

// subnetPortLister implements the SubnetPortLister interface.
type subnetPortLister struct {
	indexer cache.Indexer
}

// NewSubnetPortLister returns a new SubnetPortLister.
func NewSubnetPortLister(indexer cache.Indexer) SubnetPortLister {
	return &subnetPortLister{indexer: indexer}
}

// List lists all SubnetPorts in the indexer.
func (s *subnetPortLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetPort, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetPort))
	})
	return ret, err
}

// SubnetPorts returns an object that can list and get SubnetPorts.
func (s *subnetPortLister) SubnetPorts(namespace string) SubnetPortNamespaceLister {
	return subnetPortNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetPortNamespaceLister helps list and get SubnetPorts.
// All objects returned here must be treated as read-only.
type SubnetPortNamespaceLister interface {
	// List lists all SubnetPorts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetPort, err error)
	// Get retrieves the SubnetPort from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubnetPort, error)
	SubnetPortNamespaceListerExpansion
}

// subnetPortNamespaceLister implements the SubnetPortNamespaceLister
// interface.
type subnetPortNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetPorts in the indexer for a given namespace.
func (s subnetPortNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetPort, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetPort))
	})
	return ret, err
}

// Get retrieves the SubnetPort from the indexer for a given namespace and name.
func (s subnetPortNamespaceLister) Get(name string) (*v1alpha1.SubnetPort, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetport"), name)
	}
	return obj.(*v1alpha1.SubnetPort), nil
}
