/* Copyright Â© 2024 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: Apache-2.0 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/nsx-operator/pkg/apis/vpc/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetIPReservationLister helps list SubnetIPReservations.
// All objects returned here must be treated as read-only.
type SubnetIPReservationLister interface {
	// List lists all SubnetIPReservations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetIPReservation, err error)
	// SubnetIPReservations returns an object that can list and get SubnetIPReservations.
	SubnetIPReservations(namespace string) SubnetIPReservationNamespaceLister
	SubnetIPReservationListerExpansion
}

// subnetIPReservationLister implements the SubnetIPReservationLister interface.
type subnetIPReservationLister struct {
	indexer cache.Indexer
}

// NewSubnetIPReservationLister returns a new SubnetIPReservationLister.
func NewSubnetIPReservationLister(indexer cache.Indexer) SubnetIPReservationLister {
	return &subnetIPReservationLister{indexer: indexer}
}

// List lists all SubnetIPReservations in the indexer.
func (s *subnetIPReservationLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetIPReservation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetIPReservation))
	})
	return ret, err
}

// SubnetIPReservations returns an object that can list and get SubnetIPReservations.
func (s *subnetIPReservationLister) SubnetIPReservations(namespace string) SubnetIPReservationNamespaceLister {
	return subnetIPReservationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetIPReservationNamespaceLister helps list and get SubnetIPReservations.
// All objects returned here must be treated as read-only.
type SubnetIPReservationNamespaceLister interface {
	// List lists all SubnetIPReservations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetIPReservation, err error)
	// Get retrieves the SubnetIPReservation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubnetIPReservation, error)
	SubnetIPReservationNamespaceListerExpansion
}

// subnetIPReservationNamespaceLister implements the SubnetIPReservationNamespaceLister
// interface.
type subnetIPReservationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetIPReservations in the indexer for a given namespace.
func (s subnetIPReservationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetIPReservation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetIPReservation))
	})
	return ret, err
}

// Get retrieves the SubnetIPReservation from the indexer for a given namespace and name.
func (s subnetIPReservationNamespaceLister) Get(name string) (*v1alpha1.SubnetIPReservation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetipreservation"), name)
	}
	return obj.(*v1alpha1.SubnetIPReservation), nil
}
