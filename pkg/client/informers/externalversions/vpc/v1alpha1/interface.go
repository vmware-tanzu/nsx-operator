/* Copyright Â© 2024 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: Apache-2.0 */

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	internalinterfaces "github.com/vmware-tanzu/nsx-operator/pkg/client/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// AddressBindings returns a AddressBindingInformer.
	AddressBindings() AddressBindingInformer
	// IPAddressAllocations returns a IPAddressAllocationInformer.
	IPAddressAllocations() IPAddressAllocationInformer
	// IPBlocksInfos returns a IPBlocksInfoInformer.
	IPBlocksInfos() IPBlocksInfoInformer
	// NetworkInfos returns a NetworkInfoInformer.
	NetworkInfos() NetworkInfoInformer
	// SecurityPolicies returns a SecurityPolicyInformer.
	SecurityPolicies() SecurityPolicyInformer
	// StaticRoutes returns a StaticRouteInformer.
	StaticRoutes() StaticRouteInformer
	// Subnets returns a SubnetInformer.
	Subnets() SubnetInformer
	// SubnetPorts returns a SubnetPortInformer.
	SubnetPorts() SubnetPortInformer
	// SubnetSets returns a SubnetSetInformer.
	SubnetSets() SubnetSetInformer
	// VPCNetworkConfigurations returns a VPCNetworkConfigurationInformer.
	VPCNetworkConfigurations() VPCNetworkConfigurationInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// AddressBindings returns a AddressBindingInformer.
func (v *version) AddressBindings() AddressBindingInformer {
	return &addressBindingInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// IPAddressAllocations returns a IPAddressAllocationInformer.
func (v *version) IPAddressAllocations() IPAddressAllocationInformer {
	return &iPAddressAllocationInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// IPBlocksInfos returns a IPBlocksInfoInformer.
func (v *version) IPBlocksInfos() IPBlocksInfoInformer {
	return &iPBlocksInfoInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// NetworkInfos returns a NetworkInfoInformer.
func (v *version) NetworkInfos() NetworkInfoInformer {
	return &networkInfoInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// SecurityPolicies returns a SecurityPolicyInformer.
func (v *version) SecurityPolicies() SecurityPolicyInformer {
	return &securityPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// StaticRoutes returns a StaticRouteInformer.
func (v *version) StaticRoutes() StaticRouteInformer {
	return &staticRouteInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// Subnets returns a SubnetInformer.
func (v *version) Subnets() SubnetInformer {
	return &subnetInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// SubnetPorts returns a SubnetPortInformer.
func (v *version) SubnetPorts() SubnetPortInformer {
	return &subnetPortInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// SubnetSets returns a SubnetSetInformer.
func (v *version) SubnetSets() SubnetSetInformer {
	return &subnetSetInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// VPCNetworkConfigurations returns a VPCNetworkConfigurationInformer.
func (v *version) VPCNetworkConfigurations() VPCNetworkConfigurationInformer {
	return &vPCNetworkConfigurationInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}
