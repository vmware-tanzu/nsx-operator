package common

import (
	error2 "errors"

	"github.com/vmware/vsphere-automation-sdk-go/lib/vapi/std/errors"
	"github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	"k8s.io/client-go/tools/cache"

	util2 "github.com/vmware-tanzu/nsx-operator/pkg/nsx/util"
)

// IndexFunc is wrapper of cache.IndexFunc, used by cache.Indexers
func IndexFunc(scope string) cache.IndexFunc {
	return func(obj interface{}) ([]string, error) {
		return CRUIDScopeIndexFunc(scope, obj)
	}
}

// CRUIDScopeIndexFunc returns the index of the object.
// The index is the value of the tag with scope CRUID, the unique in
// time and space value for this object at k8s side, which is generated by k8s.
func CRUIDScopeIndexFunc(scope string, obj interface{}) ([]string, error) {
	var tags []model.Tag
	switch v := obj.(type) {
	case model.SecurityPolicy:
		tags = v.Tags
	case model.Group:
		tags = v.Tags
	case model.Rule:
		tags = v.Tags
	default:
		return nil, error2.New("invalid object type")
	}
	return filterTag(scope, tags), nil
}

func filterTag(scope string, v []model.Tag) []string {
	res := make([]string, 0, 5)
	for _, tag := range v {
		if *tag.Scope == scope {
			res = append(res, *tag.Tag)
		}
	}
	return res
}

// KeyFunc returns the key of the object.
func KeyFunc(obj interface{}) (string, error) {
	switch v := obj.(type) {
	case model.Group:
		return *v.Id, nil
	case model.SecurityPolicy:
		return *v.Id, nil
	case model.Rule:
		return *v.Id, nil
	}
	return "", nil
}

func DecrementPageSize(pageSize *int64) {
	*pageSize -= 100
	if int(*pageSize) <= 0 {
		*pageSize = 10
	}
}

func TransError(err error) error {
	switch err.(type) {
	case errors.ServiceUnavailable:
		vApiError, _ := err.(errors.ServiceUnavailable)
		if vApiError.Data == nil {
			return err
		}
		data, errs := Converter.ConvertToGolang(vApiError.Data, model.ApiErrorBindingType())
		if len(errs) > 0 {
			return err
		}
		apiError := data.(model.ApiError)
		if *apiError.ErrorCode == int64(60576) {
			return util2.PageMaxError{Desc: "page max overflow"}
		}
	default:
		return err
	}
	return err
}
