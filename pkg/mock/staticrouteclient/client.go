// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/vpcs (interfaces: StaticRoutesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
)

// MockStaticRoutesClient is a mock of StaticRoutesClient interface.
type MockStaticRoutesClient struct {
	ctrl     *gomock.Controller
	recorder *MockStaticRoutesClientMockRecorder
}

// MockStaticRoutesClientMockRecorder is the mock recorder for MockStaticRoutesClient.
type MockStaticRoutesClientMockRecorder struct {
	mock *MockStaticRoutesClient
}

// NewMockStaticRoutesClient creates a new mock instance.
func NewMockStaticRoutesClient(ctrl *gomock.Controller) *MockStaticRoutesClient {
	mock := &MockStaticRoutesClient{ctrl: ctrl}
	mock.recorder = &MockStaticRoutesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaticRoutesClient) EXPECT() *MockStaticRoutesClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStaticRoutesClient) Delete(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStaticRoutesClientMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStaticRoutesClient)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockStaticRoutesClient) Get(arg0, arg1, arg2, arg3 string) (model.StaticRoutes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.StaticRoutes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStaticRoutesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStaticRoutesClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockStaticRoutesClient) List(arg0, arg1, arg2 string, arg3 *string, arg4 *bool, arg5 *string, arg6 *int64, arg7 *bool, arg8 *string) (model.StaticRoutesListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(model.StaticRoutesListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStaticRoutesClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStaticRoutesClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Patch mocks base method.
func (m *MockStaticRoutesClient) Patch(arg0, arg1, arg2, arg3 string, arg4 model.StaticRoutes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockStaticRoutesClientMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockStaticRoutesClient)(nil).Patch), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockStaticRoutesClient) Update(arg0, arg1, arg2, arg3 string, arg4 model.StaticRoutes) (model.StaticRoutes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.StaticRoutes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStaticRoutesClientMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStaticRoutesClient)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
