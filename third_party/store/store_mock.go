// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/nsx/store/store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNSXStore is a mock of NSXStore interface.
type MockNSXStore struct {
	ctrl     *gomock.Controller
	recorder *MockNSXStoreMockRecorder
}

// MockNSXStoreMockRecorder is the mock recorder for MockNSXStore.
type MockNSXStoreMockRecorder struct {
	mock *MockNSXStore
}

// NewMockNSXStore creates a new mock instance.
func NewMockNSXStore(ctrl *gomock.Controller) *MockNSXStore {
	mock := &MockNSXStore{ctrl: ctrl}
	mock.recorder = &MockNSXStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNSXStore) EXPECT() *MockNSXStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockNSXStore) Delete(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNSXStoreMockRecorder) Delete(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNSXStore)(nil).Delete), obj)
}

// Filter mocks base method.
func (m *MockNSXStore) Filter(keysAndValues ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockNSXStoreMockRecorder) Filter(keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockNSXStore)(nil).Filter), keysAndValues...)
}

// GetByKey mocks base method.
func (m *MockNSXStore) GetByKey(key string) (interface{}, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockNSXStoreMockRecorder) GetByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockNSXStore)(nil).GetByKey), key)
}

// List mocks base method.
func (m *MockNSXStore) List() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// List indicates an expected call of List.
func (mr *MockNSXStoreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNSXStore)(nil).List))
}

// ListKeys mocks base method.
func (m *MockNSXStore) ListKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockNSXStoreMockRecorder) ListKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockNSXStore)(nil).ListKeys))
}

// Synced mocks base method.
func (m *MockNSXStore) Synced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Synced indicates an expected call of Synced.
func (mr *MockNSXStoreMockRecorder) Synced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synced", reflect.TypeOf((*MockNSXStore)(nil).Synced))
}

// Update mocks base method.
func (m *MockNSXStore) Update(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNSXStoreMockRecorder) Update(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNSXStore)(nil).Update), obj)
}
